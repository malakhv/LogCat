/**
 * Copyright (C) 2013 Mikhail Malakhov <malakhv@live.ru>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * */

apply plugin: 'maven'

/** The artifact's data */
class Artifact {
    String path, groupId, version, id, name
}

/** Define artifact. */
def artifact = new Artifact (
        id: project.ARTIFACT_NAME,
        name: project.ARTIFACT_NAME,
        groupId: project.ARTIFACT_GROUP_ID,
        path: "${rootDir}/artifacts/${project.ARTIFACT_NAME}",
        version: project.ARTIFACT_VERSION_NAME
)

configurations { deployerJars }
dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
    "org.apache.maven.wagon:wagon-ftp:2.2"
}

/**
 * Build JavaDoc.
 * */
task androidJavadocs(type: Javadoc) {
    afterEvaluate {
        failOnError = false
        source = android.sourceSets.main.java.srcDirs
        // It is not necessary for this project
        //ext.androidJar = "${project.ANDROID_JAR}"
        //classpath += files(ext.androidJar)
        androidJavadocs.dependsOn project.assembleRelease
    }
}
task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

/**
 * Make Source jar.
 * */
task androidSourcesJar(type: Jar) {
    afterEvaluate {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
}

/**
 * Print artifact data.
 * */
task printArtifact {
    println "----------------------------------------------------------------------------------"
    println "Artifact make complete successfully!"
    println "Name: ${artifact.name}"
    println "Version: ${artifact.version}"
    println "Group: ${artifact.groupId}"
    println "Patch: ${artifact.path}"
    println "----------------------------------------------------------------------------------"
}

/**
 * Zip artifact.
 * */
task zipRelease(type: Zip) {
    from artifact.path
    File destDir = file("${rootDir}/artifacts/")
    destinationDir destDir
    archiveName "${artifact.name}-${artifact.version}.zip"
}

/**
 * Make artifact and upload it to local maven repo.
 * */
task makeArtifact(type: Upload) {
    uploadDescriptor = true
    configuration = configurations.archives
    repositories.mavenDeployer {
        pom.groupId = artifact.groupId
        pom.artifactId = artifact.id
        pom.version = artifact.version
        pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        repository(url: "file://${artifact.path}")
    }
}
configure(makeArtifact) {
    group = 'publish'
    description = 'Make artifact and upload it to local maven repo.'
}
makeArtifact.shouldRunAfter(clean)
makeArtifact.dependsOn(assemble)
makeArtifact.finalizedBy(printArtifact)
makeArtifact.finalizedBy(zipRelease)

/**
 * Make artifact's snapshot and upload it to local maven repo.
 * */
task makeSnapshot(type: Upload) {
    uploadDescriptor = true
    configuration = configurations.archives
    repositories.mavenDeployer {
        pom.groupId = artifact.groupId
        pom.artifactId = artifact.id
        pom.version = "${artifact.version}-SNAPSHOT"
        pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        repository(url: "file://${artifact.path}")
    }
}
configure(makeSnapshot) {
    group = 'publish'
    description = "Make artifact's snapshot and upload it to local maven repo."
}
makeSnapshot.shouldRunAfter(clean)
makeSnapshot.dependsOn(assemble)
makeSnapshot.finalizedBy(printArtifact)
makeSnapshot.finalizedBy(zipRelease)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}