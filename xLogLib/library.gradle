apply plugin: 'maven'

// The artifact's data
class Artifact {
    String path, groupId, version, id, name
}

// The public group ID
def GROUP_ID_PUBLIC = "com.malakhv.libs"

// Define artifact
def artifact = new Artifact (
    id: project.ARTIFACT_NAME,
    name: project.ARTIFACT_NAME,
    groupId: GROUP_ID_PUBLIC,
    path: "${rootDir}/artifacts/${project.ARTIFACT_NAME}",
    version: project.ARTIFACT_VERSION_NAME
)

// Upload artifacts to local Maven repository
uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = artifact.groupId
        pom.artifactId = artifact.id
        pom.version = artifact.version
        pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        repository(url: "file://${artifact.path}")
    }
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task zipRelease(type: Zip) {
    from artifact.path
    File destDir = file("${rootDir}/artifacts/")
    destinationDir destDir
    archiveName "${artifact.name}-${artifact.version}.zip"
}

task generateRelease << {
    println "Release ${artifact.version} dir - ${artifact.path}/"
    println "Release ${artifact.version} zip - ${rootDir}/artifacts/${artifact.name}-${artifact.version}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}