/**
 * Copyright (C) 2013 Mikhail Malakhov <malakhv@live.ru>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * */

apply plugin: 'maven'

// The artifact's data
class Artifact {
    String path, groupId, version, id, name
}

// Define artifact
def artifact = new Artifact (
    id: project.ARTIFACT_NAME,
    name: project.ARTIFACT_NAME,
    groupId: ARTIFACT_GROUP_ID,
    path: "${rootDir}/artifacts/${project.ARTIFACT_NAME}",
    version: project.ARTIFACT_VERSION_NAME
)

// Upload artifacts to local Maven repository
uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = artifact.groupId
        pom.artifactId = artifact.id
        pom.version = artifact.version
        pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        repository(url: "file://${artifact.path}")
    }
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task zipRelease(type: Zip) {
    from artifact.path
    File destDir = file("${rootDir}/artifacts/")
    destinationDir destDir
    archiveName "${artifact.name}-${artifact.version}.zip"
}

task makeArtifact << {
    println "----------------------------------------------------------------------------------"
    println "Artifact make complete successfully!"
    println "Name: ${artifact.name}"
    println "Version: ${artifact.version}"
    println "Group: ${artifact.groupId}"
    println "Patch: ${artifact.path}"
    println "----------------------------------------------------------------------------------"
}

makeArtifact.dependsOn(uploadArchives)
makeArtifact.dependsOn(zipRelease)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}