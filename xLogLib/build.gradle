/* Define global artifact property */
ext {
    ARTIFACT_NAME = 'logcat'
    ARTIFACT_VERSION_CODE = '1'
    ARTIFACT_VERSION_NAME = '1.0.0'
    ARTIFACT_GROUP_ID = "com.malakhv.libs"
}

apply plugin: 'com.android.library'
apply from: 'library.gradle'

android {

    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 1
        targetSdkVersion 25
        versionCode = "${ARTIFACT_VERSION_CODE}"
        versionName "${ARTIFACT_VERSION_NAME}"
        ndk { abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a' }
    }

    // Source sets, build types and tests
    sourceSets {

        // This library has only one source set
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            jni.srcDirs = ['cpp']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to types/<type>
        // For instance, types/debug/java, types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied by a similar
        // customization.
        debug.setRoot('types/debug')
        release.setRoot('types/release')
    }

    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {  abortOnError false  }

    externalNativeBuild {
        cmake {
            path 'cpp/CMakeLists.txt'
        }
    }
}

// All library dependencies
dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
}